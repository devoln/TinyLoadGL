#pragma once

#ifndef TINY_LOAD_GL_STATIC_GLES
#ifdef _WIN32
#define TINY_LOAD_GL_STATIC_GLES 11
#else
#define TINY_LOAD_GL_STATIC_GLES 0
#endif
#endif

#include <cstdint>
#include <cstring>

typedef struct __GLsync* GLsync;
typedef unsigned char GLboolean;
typedef unsigned GLenum;
#ifdef _WIN32
struct HINSTANCE__;
#endif

namespace TinyLoadGL {
#if defined(_WIN32) && !defined(_WIN64)
#define TINY_LOAD_GL_CALL __stdcall
template<typename F> struct TGlFunc;
template<typename R, typename... Args> struct TGlFunc<R __cdecl(Args...)> {using _ = R __stdcall(Args...);};
template<typename F> using GlFunc = typename TGlFunc<F>::_;
#else
#define TINY_LOAD_GL_CALL
template<typename F> using GlFunc = F;
#endif

namespace z_D { extern "C" {
#ifdef _WIN32
using PROC = GlFunc<intptr_t()>*; // cannot substitute this directly in the line below because of a MinGW bug
using HMODULE = HINSTANCE__*;
__declspec(dllimport) PROC TINY_LOAD_GL_CALL wglGetProcAddress(const char* name);
__declspec(dllimport) HMODULE TINY_LOAD_GL_CALL LoadLibraryW(const wchar_t* name);
__declspec(dllimport) PROC TINY_LOAD_GL_CALL GetProcAddress(HMODULE hModule, const char* lpProcName);

#elif defined(__ANDROID) || defined(__APPLE__)
void* dlopen(const char* path, int mode);
void* dlsym(void* handle, const char* symbol);
#else
GlFunc<void()>* eglGetProcAddress(const char* procname);
#endif
} }

inline GlFunc<void()>* GetProcAddress(const char* name)
{
#ifdef _WIN32
	auto res = reinterpret_cast<GlFunc<void()>*>(z_D::wglGetProcAddress(name));
	if(reinterpret_cast<intptr_t>(res) >= -1 && reinterpret_cast<intptr_t>(res) <= 3) res = nullptr;
	if(!res)
	{
		static auto opengl32 = z_D::LoadLibraryW(L"opengl32.dll");
		res = reinterpret_cast<GlFunc<void()>*>(z_D::GetProcAddress(opengl32, name));
	}
	return res;
#elif defined(__ANDROID__)
	static const auto libgl = [] {
        auto res = z_D::dlopen("libGLESv3.so", 0x101);
        if(!res) res = z_D::dlopen("libGLESv2.so", 0x101);
        return res;
    }();
    return z_D::dlsym(libgl, name);
#elif defined(__APPLE__)
	char symbolName[256];
	strncpy(symbolName + 1, name, sizeof(symbolName) - 1);
	symbolName[0] = '_';
	static void* image = z_D::dlopen("/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL", 1);
	return reinterpret_cast<GlFunc<void()>*>(image? z_D::dlsym(image, name): nullptr);
#else
	return reinterpret_cast<GlFunc<void()>*>(z_D::eglGetProcAddress(name));
#endif
}

namespace z_D {
#define GL_FUNC_FIELD(name, ret, args) ret(TINY_LOAD_GL_CALL *name)args;
#define GL_FUNC_ZTERM_NAME(name, ret, args) #name "\0"
#define GL_FUNC_STATIC_LINK(name, ret, args) (gl ## name),
#define GL_FUNC_PROTOTYPE(name, ret, args) ret (TINY_LOAD_GL_CALL gl ## name)args;

#define GL_FUNC GL_FUNC_FIELD

struct Gl11E
{
	#pragma push_macro("NO_ERROR")
	#undef NO_ERROR
	static constexpr GLenum NO_ERROR = 0;
	#pragma pop_macro("NO_ERROR")

	enum: GLenum {
		DEPTH_BUFFER_BIT = 0x00000100,
		STENCIL_BUFFER_BIT = 0x00000400,
		COLOR_BUFFER_BIT = 0x00004000,

		POINTS = 0,
		LINES,
		LINE_LOOP,
		LINE_STRIP,
		TRIANGLES,
		TRIANGLE_STRIP,
		TRIANGLE_FAN,
		
		ZERO = 0,
		ONE = 1,

		SRC_COLOR = 0x0300,
		ONE_MINUS_SRC_COLOR,
		SRC_ALPHA,
		ONE_MINUS_SRC_ALPHA,
		DST_ALPHA,
		ONE_MINUS_DST_ALPHA,
		DST_COLOR,
		ONE_MINUS_DST_COLOR,
		SRC_ALPHA_SATURATE,
		
		FRONT = 0x0404,
		BACK,
		FRONT_AND_BACK = 0x0408,
		
		CULL_FACE = 0x0B44,
		BLEND = 0x0BE2,
		TEXTURE_2D = 0x0DE1,
		DITHER = 0x0BD0,
		DEPTH_TEST = 0x0B71,
		SCISSOR_TEST = 0x0C11,
		STENCIL_TEST = 0x0B90,
		POLYGON_OFFSET_FILL = 0x8037,

		INVALID_ENUM = 0x0500,
		INVALID_VALUE,
		INVALID_OPERATION,
		OUT_OF_MEMORY = 0x0505,

		CW = 0x0900,
		CCW,

		LINE_WIDTH = 0x0B21,
		CULL_FACE_MODE = 0x0B45,
		FRONT_FACE,
		DEPTH_RANGE = 0x0B70,
		DEPTH_WRITEMASK = 0x0B72,
		DEPTH_CLEAR_VALUE, DEPTH_FUNC,
		STENCIL_FUNC = 0x0B92,
		STENCIL_FAIL = 0x0B94,
		STENCIL_CLEAR_VALUE = 0x0B91,
		STENCIL_PASS_DEPTH_FAIL = 0x0B95,
		STENCIL_PASS_DEPTH_PASS,
		STENCIL_REF,
		STENCIL_VALUE_MASK = 0x0B93,
		STENCIL_WRITEMASK = 0x0B98,
		VIEWPORT = 0x0BA2,
		SCISSOR_BOX = 0x0C10,
		COLOR_CLEAR_VALUE = 0x0C22,
		COLOR_WRITEMASK,
		UNPACK_ALIGNMENT = 0x0CF5,
		PACK_ALIGNMENT = 0x0D05,
		MAX_TEXTURE_SIZE = 0x0D33,
		MAX_VIEWPORT_DIMS = 0x0D3A,
		
		SUBPIXEL_BITS = 0x0D50,
		RED_BITS = 0x0D52,
		GREEN_BITS,
		BLUE_BITS,
		ALPHA_BITS,
		DEPTH_BITS,
		STENCIL_BITS,

		POLYGON_OFFSET_UNITS = 0x2A00,
		POLYGON_OFFSET_FACTOR = 0x8038,
		TEXTURE_BINDING_2D = 0x8069,

		DONT_CARE = 0x1100,
		FASTEST,
		NICEST,

		BYTE = 0x1400,
		UNSIGNED_BYTE,
		SHORT,
		UNSIGNED_SHORT,
		INT,
		UNSIGNED_INT,
		FLOAT,

		DEPTH_COMPONENT = 0x1902,
		ALPHA = 0x1906,
		RGB,
		RGBA,
		LUMINANCE,
		LUMINANCE_ALPHA,

		NEVER = 0x0200,
		LESS,
		EQUAL,
		LEQUAL,
		GREATER,
		NOTEQUAL,
		GEQUAL,
		ALWAYS,

		KEEP = 0x1E00,
		REPLACE,
		INCR,
		DECR,
		INVERT = 0x150A,

		VENDOR = 0x1F00,
		RENDERER,
		VERSION,
		EXTENSIONS = 0x1F03,

		NEAREST = 0x2600,
		LINEAR,
		NEAREST_MIPMAP_NEAREST = 0x2700,
		LINEAR_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_LINEAR,

		TEXTURE_MAG_FILTER = 0x2800,
		TEXTURE_MIN_FILTER,
		TEXTURE_WRAP_S,
		TEXTURE_WRAP_T,

		TEXTURE = 0x1702,
		TEXTURE0 = 0x84C0,
		REPEAT = 0x2901,

		RGBA4 = 0x8056,
		RGB5_A1,

		NONE = 0,
	};
};

struct Gles2E
{
	enum: GLenum {
		FIXED = 0x140C,

		FUNC_ADD = 0x8006,
		FUNC_SUBTRACT = 0x800A,
		FUNC_REVERSE_SUBTRACT = 0x800B,
		BLEND_EQUATION = 0x8009,
		BLEND_EQUATION_RGB = BLEND_EQUATION,
		BLEND_EQUATION_ALPHA = 0x883D,
		BLEND_DST_RGB = 0x80C8,
		BLEND_SRC_RGB,
		BLEND_DST_ALPHA = 0x80CA,
		BLEND_SRC_ALPHA,
		CONSTANT_COLOR = 0x8001,
		ONE_MINUS_CONSTANT_COLOR,
		CONSTANT_ALPHA,
		ONE_MINUS_CONSTANT_ALPHA,
		BLEND_COLOR,

		ARRAY_BUFFER = 0x8892,
		ELEMENT_ARRAY_BUFFER,
		ARRAY_BUFFER_BINDING = 0x8894,
		ELEMENT_ARRAY_BUFFER_BINDING,
		STREAM_DRAW = 0x88E0,
		STATIC_DRAW = 0x88E4,
		DYNAMIC_DRAW = 0x88E8,
		BUFFER_SIZE = 0x8764,
		BUFFER_USAGE,

		CURRENT_VERTEX_ATTRIB = 0x8626,
		SAMPLE_ALPHA_TO_COVERAGE = 0x809E,
		SAMPLE_COVERAGE = 0x80A0,
		ALIASED_POINT_SIZE_RANGE = 0x846D,
		ALIASED_LINE_WIDTH_RANGE,
		SAMPLE_BUFFERS = 0x80A8,
		SAMPLES,
		SAMPLE_COVERAGE_VALUE = 0x80AA,
		SAMPLE_COVERAGE_INVERT,

		STENCIL_BACK_FUNC = 0x8800,
		STENCIL_BACK_FAIL,
		STENCIL_BACK_PASS_DEPTH_FAIL,
		STENCIL_BACK_PASS_DEPTH_PASS,
		STENCIL_BACK_REF = 0x8CA3,
		STENCIL_BACK_VALUE_MASK,
		STENCIL_BACK_WRITEMASK,

		NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2,
		COMPRESSED_TEXTURE_FORMATS,
		GENERATE_MIPMAP_HINT = 0x8192,

		UNSIGNED_SHORT_4_4_4_4 = 0x8033,
		UNSIGNED_SHORT_5_5_5_1,
		UNSIGNED_SHORT_5_6_5 = 0x8363,

		FRAGMENT_SHADER = 0x8B30,
		VERTEX_SHADER,
		SHADER_TYPE = 0x8B4F,
		DELETE_STATUS = 0x8B80,
		COMPILE_STATUS,
		LINK_STATUS,
		VALIDATE_STATUS,
		INFO_LOG_LENGTH,
		ATTACHED_SHADERS,
		ACTIVE_UNIFORMS,
		ACTIVE_UNIFORM_MAX_LENGTH,
		SHADER_SOURCE_LENGTH,
		ACTIVE_ATTRIBUTES,
		ACTIVE_ATTRIBUTE_MAX_LENGTH,
		SHADING_LANGUAGE_VERSION = 0x8B8C,
		CURRENT_PROGRAM,
		SHADER_COMPILER = 0x8DFA,
		SHADER_BINARY_FORMATS = 0x8DF8,
		NUM_SHADER_BINARY_FORMATS,

		MAX_VERTEX_ATTRIBS = 0x8869,
		MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB,
		MAX_VARYING_VECTORS = 0x8DFC,
		MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
		MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
		MAX_TEXTURE_IMAGE_UNITS = 0x8872,
		MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD,
		MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C,

		INCR_WRAP = 0x8507, DECR_WRAP = 0x8508,
		TEXTURE_CUBE_MAP = 0x8513,
		TEXTURE_BINDING_CUBE_MAP,
		TEXTURE_CUBE_MAP_POSITIVE_X,
		TEXTURE_CUBE_MAP_NEGATIVE_X,
		TEXTURE_CUBE_MAP_POSITIVE_Y,
		TEXTURE_CUBE_MAP_NEGATIVE_Y,
		TEXTURE_CUBE_MAP_POSITIVE_Z,
		TEXTURE_CUBE_MAP_NEGATIVE_Z,
		ACTIVE_TEXTURE = 0x84E0,
		CLAMP_TO_EDGE = 0x812F,
		MIRRORED_REPEAT = 0x8370,

		FLOAT_VEC2 = 0x8B50,
		FLOAT_VEC3,
		FLOAT_VEC4,
		INT_VEC2,
		INT_VEC3,
		INT_VEC4,
		BOOL,
		BOOL_VEC2,
		BOOL_VEC3,
		BOOL_VEC4,
		FLOAT_MAT2,
		FLOAT_MAT3,
		FLOAT_MAT4,
		SAMPLER_2D = 0x8B5E,
		SAMPLER_CUBE = 0x8B60,

		VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622,
		VERTEX_ATTRIB_ARRAY_SIZE,
		VERTEX_ATTRIB_ARRAY_STRIDE,
		VERTEX_ATTRIB_ARRAY_TYPE,
		VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
		VERTEX_ATTRIB_ARRAY_POINTER = 0x8645,
		VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F,

		IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
		IMPLEMENTATION_COLOR_READ_FORMAT,

		LOW_FLOAT = 0x8DF0,
		MEDIUM_FLOAT,
		HIGH_FLOAT,
		LOW_INT,
		MEDIUM_INT,
		HIGH_INT,

		FRAMEBUFFER = 0x8D40,
		RENDERBUFFER,

		RGB565 = 0x8D62,
		DEPTH_COMPONENT16 = 0x81A5,
		STENCIL_INDEX8 = 0x8D48,

		RENDERBUFFER_WIDTH = 0x8D42,
		RENDERBUFFER_HEIGHT,
		RENDERBUFFER_INTERNAL_FORMAT,
		RENDERBUFFER_RED_SIZE = 0x8D50,
		RENDERBUFFER_GREEN_SIZE,
		RENDERBUFFER_BLUE_SIZE,
		RENDERBUFFER_ALPHA_SIZE,
		RENDERBUFFER_DEPTH_SIZE,
		RENDERBUFFER_STENCIL_SIZE,
		FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0,
		FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,
		FRAMEBUFFER_COMPLETE = 0x8CD5,
		FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
		FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
		FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9,
		FRAMEBUFFER_UNSUPPORTED = 0x8CDD,
		FRAMEBUFFER_BINDING = 0x8CA6,
		RENDERBUFFER_BINDING,
		MAX_RENDERBUFFER_SIZE = 0x84E8,
		INVALID_FRAMEBUFFER_OPERATION = 0x0506,
		COLOR_ATTACHMENT0 = 0x8CE0,
		DEPTH_ATTACHMENT = 0x8D00,
		STENCIL_ATTACHMENT = 0x8D20
	};
};

struct Gles3E
{
	#pragma push_macro("WAIT_FAILED")
	#undef WAIT_FAILED
	static constexpr GLenum WAIT_FAILED = 0x911D;
	#pragma pop_macro("WAIT_FAILED")

	enum: GLenum {
		READ_BUFFER = 0x0C02,
		UNPACK_ROW_LENGTH = 0x0CF2,
		UNPACK_SKIP_ROWS,
		UNPACK_SKIP_PIXELS,
		PACK_ROW_LENGTH = 0x0D02,
		PACK_SKIP_ROWS,
		PACK_SKIP_PIXELS,

		COLOR = 0x1800,
		DEPTH,
		STENCIL,
		RED = 0x1903,
		RGB8 = 0x8051,
		RGBA8 = 0x8058,
		RGB10_A2,
		TEXTURE_BINDING_3D = 0x806A,
		UNPACK_SKIP_IMAGES = 0x806D,
		UNPACK_IMAGE_HEIGHT,

		TEXTURE_3D,
		TEXTURE_2D_ARRAY = 0x8C1A,
		TEXTURE_BINDING_2D_ARRAY = 0x8C1D,

		TEXTURE_WRAP_R = 0x8072,
		MAX_3D_TEXTURE_SIZE,
		UNSIGNED_INT_2_10_10_10_REV = 0x8368,
		MAX_ELEMENTS_VERTICES = 0x80E8,
		MAX_ELEMENTS_INDICES,

		TEXTURE_MIN_LOD = 0x813A,
		TEXTURE_MAX_LOD,
		TEXTURE_BASE_LEVEL,
		TEXTURE_MAX_LEVEL,

		MIN = 0x8007,
		MAX,
		DEPTH_COMPONENT24 = 0x81A6,
		MAX_TEXTURE_LOD_BIAS = 0x84FD,
		TEXTURE_COMPARE_MODE = 0x884C,
		TEXTURE_COMPARE_FUNC,
		CURRENT_QUERY = 0x8865,
		QUERY_RESULT,
		QUERY_RESULT_AVAILABLE,

		BUFFER_MAPPED = 0x88BC,
		BUFFER_MAP_POINTER,
		STREAM_READ = 0x88E1,
		STREAM_COPY,
		STATIC_READ = 0x88E5,
		STATIC_COPY,
		DYNAMIC_READ = 0x88E9,
		DYNAMIC_COPY,

		MAX_DRAW_BUFFERS = 0x8824,
		DRAW_BUFFER0,
		MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
		MAX_VERTEX_UNIFORM_COMPONENTS,
		SAMPLER_3D = 0x8B5F,
		SAMPLER_2D_SHADOW = 0x8B62,
		FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,

		PIXEL_PACK_BUFFER = 0x88EB,
		PIXEL_UNPACK_BUFFER,
		PIXEL_PACK_BUFFER_BINDING,
		PIXEL_UNPACK_BUFFER_BINDING = 0x88EF,

		FLOAT_MAT2x3 = 0x8B65,
		FLOAT_MAT2x4,
		FLOAT_MAT3x2,
		FLOAT_MAT3x4,
		FLOAT_MAT4x2,
		FLOAT_MAT4x3,

		COMPARE_REF_TO_TEXTURE = 0x884E,
		MAJOR_VERSION = 0x821B,
		MINOR_VERSION,
		NUM_EXTENSIONS,


		SRGB = 0x8C40,
		SRGB8,
		SRGB8_ALPHA8 = 0x8C43,
		RGBA32F = 0x8814,
		RGB32F,
		RGBA16F = 0x881A,
		RGB16F,
		R11F_G11F_B10F = 0x8C3A,
		RGB9_E5 = 0x8C3D,
		RGBA32UI = 0x8D70,
		RGB32UI,
		RGBA16UI = 0x8D76,
		RGB16UI,
		RGBA8UI = 0x8D7C,
		RGB8UI,
		RGBA32I = 0x8D82,
		RGB32I,
		RGBA16I = 0x8D88,
		RGB16I,
		RGBA8I = 0x8D8E,
		RGB8I,
		RG = 0x8227,
		RG_INTEGER,
		R8,
		RG8,
		R16F = 0x822D,
		R32F,
		RG16F,
		RG32F,
		R8I,
		R8UI,
		R16I,
		R16UI,
		R32I,
		R32UI,
		RG8I,
		RG8UI,
		RG16I,
		RG16UI,
		RG32I,
		RG32UI,
		R8_SNORM = 0x8F94,
		RG8_SNORM,
		RGB8_SNORM,
		RGBA8_SNORM,
		DEPTH_COMPONENT32F = 0x8CAC,
		DEPTH32F_STENCIL8,

		UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B,
		UNSIGNED_INT_5_9_9_9_REV = 0x8C3E,
		HALF_FLOAT = 0x140B,

		VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD,
		MAX_ARRAY_TEXTURE_LAYERS = 0x88FF,
		MIN_PROGRAM_TEXEL_OFFSET = 0x8904,
		MAX_PROGRAM_TEXEL_OFFSET,
		MAX_VARYING_COMPONENTS = 0x8B4B,

		TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76,
		TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80,
		TRANSFORM_FEEDBACK_VARYINGS = 0x8C83, TRANSFORM_FEEDBACK_BUFFER_START, TRANSFORM_FEEDBACK_BUFFER_SIZE,
		TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88,
		RASTERIZER_DISCARD = 0x8C89,
		MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS,
		MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,
		INTERLEAVED_ATTRIBS,
		SEPARATE_ATTRIBS,
		TRANSFORM_FEEDBACK_BUFFER,
		TRANSFORM_FEEDBACK_BUFFER_BINDING,

		RED_INTEGER = 0x8D94,
		RGB_INTEGER = 0x8D98,
		RGBA_INTEGER,

		SAMPLER_2D_ARRAY = 0x8DC1,
		SAMPLER_2D_ARRAY_SHADOW = 0x8DC4,
		SAMPLER_CUBE_SHADOW,
		UNSIGNED_INT_VEC2 = 0x8DC6,
		UNSIGNED_INT_VEC3,
		UNSIGNED_INT_VEC4,
		INT_SAMPLER_2D = 0x8DCA,
		INT_SAMPLER_3D,
		INT_SAMPLER_CUBE,
		INT_SAMPLER_2D_ARRAY = 0x8DCF,
		UNSIGNED_INT_SAMPLER_2D = 0x8DD2,
		UNSIGNED_INT_SAMPLER_3D,
		UNSIGNED_INT_SAMPLER_CUBE,
		UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7,

		BUFFER_ACCESS_FLAGS = 0x911F,
		BUFFER_MAP_LENGTH,
		BUFFER_MAP_OFFSET,
		FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD,
		FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210,
		FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
		FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212,
		FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
		FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
		FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
		FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
		FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
		FRAMEBUFFER_DEFAULT,
		FRAMEBUFFER_UNDEFINED,
		DEPTH_STENCIL_ATTACHMENT,
		DEPTH_STENCIL = 0x84F9,
		UNSIGNED_INT_24_8,
		DEPTH24_STENCIL8 = 0x88F0,
		UNSIGNED_NORMALIZED = 0x8C17,
		DRAW_FRAMEBUFFER_BINDING = 0x8CA6,
		READ_FRAMEBUFFER = 0x8CA8,
		DRAW_FRAMEBUFFER,
		READ_FRAMEBUFFER_BINDING,
		RENDERBUFFER_SAMPLES,
		FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4,
		MAX_COLOR_ATTACHMENTS = 0x8CDF,
		FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56,
		MAX_SAMPLES = 0x8D57,

		MAP_READ_BIT = 0x0001,
		MAP_WRITE_BIT = 0x0002,
		MAP_INVALIDATE_RANGE_BIT = 0x0004,
		MAP_INVALIDATE_BUFFER_BIT = 0x0008,
		MAP_FLUSH_EXPLICIT_BIT = 0x0010,
		MAP_UNSYNCHRONIZED_BIT = 0x0020,

		VERTEX_ARRAY_BINDING = 0x85B5,
		SIGNED_NORMALIZED = 0x8F9C,
		PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69,
		COPY_READ_BUFFER = 0x8F36,
		COPY_WRITE_BUFFER,
		COPY_READ_BUFFER_BINDING = COPY_READ_BUFFER,
		COPY_WRITE_BUFFER_BINDING = COPY_WRITE_BUFFER,
		UNIFORM_BUFFER = 0x8A11,
		UNIFORM_BUFFER_BINDING = 0x8A28,
		UNIFORM_BUFFER_START,
		UNIFORM_BUFFER_SIZE,
		MAX_VERTEX_UNIFORM_BLOCKS,
		MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D,
		MAX_COMBINED_UNIFORM_BLOCKS,
		MAX_UNIFORM_BUFFER_BINDINGS,
		MAX_UNIFORM_BLOCK_SIZE,
		MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
		MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33,
		UNIFORM_BUFFER_OFFSET_ALIGNMENT,
		ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH,
		ACTIVE_UNIFORM_BLOCKS,
		UNIFORM_TYPE,
		UNIFORM_SIZE,
		UNIFORM_NAME_LENGTH,
		UNIFORM_BLOCK_INDEX,
		UNIFORM_OFFSET,
		UNIFORM_ARRAY_STRIDE,
		UNIFORM_MATRIX_STRIDE,
		UNIFORM_IS_ROW_MAJOR,
		UNIFORM_BLOCK_BINDING,
		UNIFORM_BLOCK_DATA_SIZE,
		UNIFORM_BLOCK_NAME_LENGTH,
		UNIFORM_BLOCK_ACTIVE_UNIFORMS,
		UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
		UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER,
		UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46,
		INVALID_INDEX = 0xFFFFFFFFu,
		MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122,
		MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125,

		MAX_SERVER_WAIT_TIMEOUT = 0x9111,
		OBJECT_TYPE,
		SYNC_CONDITION,
		SYNC_STATUS,
		SYNC_FLAGS,
		SYNC_FENCE,
		SYNC_GPU_COMMANDS_COMPLETE,
		UNSIGNALED,
		SIGNALED,
		ALREADY_SIGNALED,
		TIMEOUT_EXPIRED,
		CONDITION_SATISFIED,

		SYNC_FLUSH_COMMANDS_BIT = 0x00000001,
		VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE,
		ANY_SAMPLES_PASSED = 0x8C2F,
		ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A,
		SAMPLER_BINDING = 0x8919,
		RGB10_A2UI = 0x906F,
		TEXTURE_SWIZZLE_R = 0x8E42,
		TEXTURE_SWIZZLE_G,
		TEXTURE_SWIZZLE_B,
		TEXTURE_SWIZZLE_A,

		GREEN = 0x1904,
		BLUE,

		INT_2_10_10_10_REV = 0x8D9F,

		TRANSFORM_FEEDBACK = 0x8E22,
		TRANSFORM_FEEDBACK_PAUSED,
		TRANSFORM_FEEDBACK_ACTIVE,
		TRANSFORM_FEEDBACK_BINDING,

		PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
		PROGRAM_BINARY_LENGTH = 0x8741,
		NUM_PROGRAM_BINARY_FORMATS = 0x87FE,
		PROGRAM_BINARY_FORMATS = 0x87FF,

		COMPRESSED_R11_EAC = 0x9270,
		COMPRESSED_SIGNED_R11_EAC,
		COMPRESSED_RG11_EAC,
		COMPRESSED_SIGNED_RG11_EAC,
		COMPRESSED_RGB8_ETC2,
		COMPRESSED_SRGB8_ETC2,
		COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,
		COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,
		COMPRESSED_RGBA8_ETC2_EAC,
		COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,

		TEXTURE_IMMUTABLE_FORMAT = 0x912F,
		MAX_ELEMENT_INDEX = 0x8D6B,
		NUM_SAMPLE_COUNTS = 0x9380,
		TEXTURE_IMMUTABLE_LEVELS = 0x82DF,
	};

	enum: uint64_t {
		TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFull,
	};
};

struct Gles31E
{
	enum: GLenum {
		COMPUTE_SHADER = 0x91B9,
		MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB,
		MAX_COMPUTE_TEXTURE_IMAGE_UNITS,
		MAX_COMPUTE_IMAGE_UNIFORMS,
		MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
		MAX_COMPUTE_UNIFORM_COMPONENTS,
		MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS,
		MAX_COMPUTE_ATOMIC_COUNTERS,
		MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS,
		MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
		MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE,
		MAX_COMPUTE_WORK_GROUP_SIZE,
		COMPUTE_WORK_GROUP_SIZE = 0x8267,
		DISPATCH_INDIRECT_BUFFER = 0x90EE,
		DISPATCH_INDIRECT_BUFFER_BINDING,
		COMPUTE_SHADER_BIT = 0x00000020,

		DRAW_INDIRECT_BUFFER = 0x8F3F,
		DRAW_INDIRECT_BUFFER_BINDING = 0x8F43,
		MAX_UNIFORM_LOCATIONS = 0x826E,

		FRAMEBUFFER_DEFAULT_WIDTH = 0x9310,
		FRAMEBUFFER_DEFAULT_HEIGHT,
		FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313,
		FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS,
		MAX_FRAMEBUFFER_WIDTH,
		MAX_FRAMEBUFFER_HEIGHT,
		MAX_FRAMEBUFFER_SAMPLES = 0x9318,

		UNIFORM = 0x92E1,
		UNIFORM_BLOCK,
		PROGRAM_INPUT,
		PROGRAM_OUTPUT,
		BUFFER_VARIABLE,
		SHADER_STORAGE_BLOCK,

		ATOMIC_COUNTER_BUFFER = 0x92C0,
		TRANSFORM_FEEDBACK_VARYING = 0x92F4,
		ACTIVE_RESOURCES,
		MAX_NAME_LENGTH,
		MAX_NUM_ACTIVE_VARIABLES,
		NAME_LENGTH = 0x92F9,
		TYPE,
		ARRAY_SIZE,
		OFFSET,
		BLOCK_INDEX,
		ARRAY_STRIDE,
		MATRIX_STRIDE,
		IS_ROW_MAJOR,
		ATOMIC_COUNTER_BUFFER_INDEX,
		BUFFER_BINDING,
		BUFFER_DATA_SIZE,
		NUM_ACTIVE_VARIABLES,
		ACTIVE_VARIABLES,
		REFERENCED_BY_VERTEX_SHADER,
		REFERENCED_BY_FRAGMENT_SHADER = 0x930A,
		REFERENCED_BY_COMPUTE_SHADER,
		TOP_LEVEL_ARRAY_SIZE,
		TOP_LEVEL_ARRAY_STRIDE,
		LOCATION,
		VERTEX_SHADER_BIT = 0x00000001,
		FRAGMENT_SHADER_BIT = 0x00000002,
		ALL_SHADER_BITS = 0xFFFFFFFF,
		PROGRAM_SEPARABLE = 0x8258,
		ACTIVE_PROGRAM,
		PROGRAM_PIPELINE_BINDING,

		ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1,
		ATOMIC_COUNTER_BUFFER_START,
		ATOMIC_COUNTER_BUFFER_SIZE,
		MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
		MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
		MAX_COMBINED_ATOMIC_COUNTER_BUFFERS,
		MAX_VERTEX_ATOMIC_COUNTERS,
		MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6,
		MAX_COMBINED_ATOMIC_COUNTERS,
		MAX_ATOMIC_COUNTER_BUFFER_SIZE,
		MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
		ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9,
		UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB,

		MAX_IMAGE_UNITS = 0x8F38,
		MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA,
		MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE,
		MAX_COMBINED_IMAGE_UNIFORMS,
		IMAGE_BINDING_NAME = 0x8F3A,
		IMAGE_BINDING_LEVEL,
		IMAGE_BINDING_LAYERED,
		IMAGE_BINDING_LAYER,
		IMAGE_BINDING_ACCESS = 0x8F3E,
		IMAGE_BINDING_FORMAT = 0x906E,

		VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001,
		ELEMENT_ARRAY_BARRIER_BIT = 0x00000002,
		UNIFORM_BARRIER_BIT = 0x00000004,
		TEXTURE_FETCH_BARRIER_BIT = 0x00000008,
		SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020,
		COMMAND_BARRIER_BIT = 0x00000040,
		PIXEL_BUFFER_BARRIER_BIT = 0x00000080,
		TEXTURE_UPDATE_BARRIER_BIT = 0x00000100,
		BUFFER_UPDATE_BARRIER_BIT = 0x00000200,
		FRAMEBUFFER_BARRIER_BIT = 0x00000400,
		TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800,
		ATOMIC_COUNTER_BARRIER_BIT = 0x00001000,
		ALL_BARRIER_BITS = 0xFFFFFFFF,

		IMAGE_2D = 0x904D,
		IMAGE_3D,
		IMAGE_CUBE = 0x9050,
		IMAGE_2D_ARRAY = 0x9053,
		INT_IMAGE_2D = 0x9058,
		INT_IMAGE_3D,
		INT_IMAGE_CUBE = 0x905B,
		INT_IMAGE_2D_ARRAY = 0x905E,
		UNSIGNED_INT_IMAGE_2D = 0x9063,
		UNSIGNED_INT_IMAGE_3D,
		UNSIGNED_INT_IMAGE_CUBE = 0x9066,
		UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069,
		IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7,
		IMAGE_FORMAT_COMPATIBILITY_BY_SIZE,
		IMAGE_FORMAT_COMPATIBILITY_BY_CLASS,

		READ_ONLY = 0x88B8,
		WRITE_ONLY,
		READ_WRITE,

		SHADER_STORAGE_BUFFER = 0x90D2,
		SHADER_STORAGE_BUFFER_BINDING,
		SHADER_STORAGE_BUFFER_START,
		SHADER_STORAGE_BUFFER_SIZE,
		MAX_VERTEX_SHADER_STORAGE_BLOCKS,

		MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
		MAX_COMPUTE_SHADER_STORAGE_BLOCKS,
		MAX_COMBINED_SHADER_STORAGE_BLOCKS,
		MAX_SHADER_STORAGE_BUFFER_BINDINGS,
		MAX_SHADER_STORAGE_BLOCK_SIZE,
		SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT,
		SHADER_STORAGE_BARRIER_BIT = 0x00002000,

		MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,
		DEPTH_STENCIL_TEXTURE_MODE = 0x90EA,
		STENCIL_INDEX = 0x1901,
		MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
		MAX_PROGRAM_TEXTURE_GATHER_OFFSET,
		SAMPLE_POSITION = 0x8E50,
		SAMPLE_MASK,
		SAMPLE_MASK_VALUE,
		TEXTURE_2D_MULTISAMPLE = 0x9100,
		MAX_SAMPLE_MASK_WORDS = 0x8E59,
		MAX_COLOR_TEXTURE_SAMPLES = 0x910E,
		MAX_DEPTH_TEXTURE_SAMPLES,
		MAX_INTEGER_SAMPLES,

		TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104,
		TEXTURE_SAMPLES = 0x9106,
		TEXTURE_FIXED_SAMPLE_LOCATIONS,
		TEXTURE_WIDTH = 0x1000,
		TEXTURE_HEIGHT,
		TEXTURE_DEPTH = 0x8071,
		TEXTURE_INTERNAL_FORMAT = 0x1003,
		TEXTURE_RED_SIZE = 0x805C,
		TEXTURE_GREEN_SIZE = 0x805D,
		TEXTURE_BLUE_SIZE = 0x805E,
		TEXTURE_ALPHA_SIZE = 0x805F,
		TEXTURE_DEPTH_SIZE = 0x884A,
		TEXTURE_STENCIL_SIZE = 0x88F1,
		TEXTURE_SHARED_SIZE = 0x8C3F,
		TEXTURE_RED_TYPE = 0x8C10,
		TEXTURE_GREEN_TYPE,
		TEXTURE_BLUE_TYPE,
		TEXTURE_ALPHA_TYPE,
		TEXTURE_DEPTH_TYPE = 0x8C16,
		TEXTURE_COMPRESSED = 0x86A1,

		SAMPLER_2D_MULTISAMPLE = 0x9108,
		INT_SAMPLER_2D_MULTISAMPLE,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE,
		VERTEX_ATTRIB_BINDING = 0x82D4,
		VERTEX_ATTRIB_RELATIVE_OFFSET,
		VERTEX_BINDING_DIVISOR,
		VERTEX_BINDING_OFFSET,
		VERTEX_BINDING_STRIDE,
		VERTEX_BINDING_BUFFER = 0x8F4F,
		MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
		MAX_VERTEX_ATTRIB_BINDINGS,
		MAX_VERTEX_ATTRIB_STRIDE = 0x82E5
	};
};

struct Gles32E
{
	#pragma push_macro("DIFFERENCE")
	#undef DIFFERENCE
	static constexpr GLenum DIFFERENCE = 0x929E;
	#pragma pop_macro("DIFFERENCE")

	enum: GLenum {
		MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381,
		MULTISAMPLE_LINE_WIDTH_GRANULARITY,

		MULTIPLY = 0x9294,
		SCREEN,
		OVERLAY,
		DARKEN,
		LIGHTEN,
		COLORDODGE,
		COLORBURN,
		HARDLIGHT,
		SOFTLIGHT,
		EXCLUSION = 0x92A0,
		HSL_HUE = 0x92AD,
		HSL_SATURATION,
		HSL_COLOR,
		HSL_LUMINOSITY,

		DEBUG_OUTPUT_SYNCHRONOUS = 0x8242,
		DEBUG_NEXT_LOGGED_MESSAGE_LENGTH,
		DEBUG_CALLBACK_FUNCTION,
		DEBUG_CALLBACK_USER_PARAM,
		DEBUG_SOURCE_API = 0x8246,
		DEBUG_SOURCE_WINDOW_SYSTEM,
		DEBUG_SOURCE_SHADER_COMPILER,
		DEBUG_SOURCE_THIRD_PARTY,
		DEBUG_SOURCE_APPLICATION,
		DEBUG_SOURCE_OTHER,
		DEBUG_TYPE_ERROR,
		DEBUG_TYPE_DEPRECATED_BEHAVIOR,
		DEBUG_TYPE_UNDEFINED_BEHAVIOR,
		DEBUG_TYPE_PORTABILITY,
		DEBUG_TYPE_PERFORMANCE,
		DEBUG_TYPE_OTHER,
		DEBUG_TYPE_MARKER = 0x8268,
		DEBUG_TYPE_PUSH_GROUP,
		DEBUG_TYPE_POP_GROUP,
		DEBUG_SEVERITY_NOTIFICATION,
		MAX_DEBUG_GROUP_STACK_DEPTH,
		DEBUG_GROUP_STACK_DEPTH,
		BUFFER = 0x82E0,
		SHADER,
		PROGRAM,
		VERTEX_ARRAY = 0x8074,
		QUERY = 0x82E3,
		PROGRAM_PIPELINE,
		SAMPLER = 0x82E6,
		MAX_LABEL_LENGTH = 0x82E8,
		MAX_DEBUG_MESSAGE_LENGTH = 0x9143,
		MAX_DEBUG_LOGGED_MESSAGES = 0x9144,
		DEBUG_LOGGED_MESSAGES,
		DEBUG_SEVERITY_HIGH,
		DEBUG_SEVERITY_MEDIUM,
		DEBUG_SEVERITY_LOW,
		DEBUG_OUTPUT = 0x92E0,
		CONTEXT_FLAG_DEBUG_BIT = 0x00000002,
		STACK_OVERFLOW = 0x0503,
		STACK_UNDERFLOW,

		GEOMETRY_SHADER = 0x8DD9,
		GEOMETRY_SHADER_BIT = 0x00000004,
		GEOMETRY_VERTICES_OUT = 0x8916,
		GEOMETRY_INPUT_TYPE,
		GEOMETRY_OUTPUT_TYPE,
		GEOMETRY_SHADER_INVOCATIONS = 0x887F,
		LAYER_PROVOKING_VERTEX = 0x825E,

		LINES_ADJACENCY = 0x000A,
		LINE_STRIP_ADJACENCY,
		TRIANGLES_ADJACENCY,
		TRIANGLE_STRIP_ADJACENCY,

		MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF,
		MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C,
		MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32,
		MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123,
		MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124,
		MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0,
		MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1,
		MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A,
		MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29,
		MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
		MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5,
		MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD,
		MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,

		FIRST_VERTEX_CONVENTION = 0x8E4D,
		LAST_VERTEX_CONVENTION,
		UNDEFINED_VERTEX = 0x8260,
		PRIMITIVES_GENERATED = 0x8C87,
		FRAMEBUFFER_DEFAULT_LAYERS = 0x9312,
		MAX_FRAMEBUFFER_LAYERS = 0x9317,
		FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8,
		FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7,
		REFERENCED_BY_GEOMETRY_SHADER  = 0x9309,
		PRIMITIVE_BOUNDING_BOX = 0x92BE,
		CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004,
		CONTEXT_FLAGS = 0x821E,
		LOSE_CONTEXT_ON_RESET = 0x8252,
		GUILTY_CONTEXT_RESET,
		INNOCENT_CONTEXT_RESET,
		UNKNOWN_CONTEXT_RESET,
		RESET_NOTIFICATION_STRATEGY,
		NO_RESET_NOTIFICATION = 0x8261,
		CONTEXT_LOST = 0x0507,
		SAMPLE_SHADING = 0x8C36,
		MIN_SAMPLE_SHADING_VALUE,
		MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
		MAX_FRAGMENT_INTERPOLATION_OFFSET,
		FRAGMENT_INTERPOLATION_OFFSET_BITS,

		PATCHES = 0x000E,
		PATCH_VERTICES = 0x8E72,
		TESS_CONTROL_OUTPUT_VERTICES = 0x8E75,
		TESS_GEN_MODE,
		TESS_GEN_SPACING,
		TESS_GEN_VERTEX_ORDER,
		TESS_GEN_POINT_MODE,
		ISOLINES,
		QUADS = 0x0007,
		FRACTIONAL_ODD = 0x8E7B,
		FRACTIONAL_EVEN,
		MAX_PATCH_VERTICES,
		MAX_TESS_GEN_LEVEL,
		MAX_TESS_CONTROL_UNIFORM_COMPONENTS,
		MAX_TESS_EVALUATION_UNIFORM_COMPONENTS,
		MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS,
		MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS,
		MAX_TESS_CONTROL_OUTPUT_COMPONENTS,
		MAX_TESS_PATCH_COMPONENTS,
		MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS,
		MAX_TESS_EVALUATION_OUTPUT_COMPONENTS,
		MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
		MAX_TESS_EVALUATION_UNIFORM_BLOCKS,
		MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
		MAX_TESS_EVALUATION_INPUT_COMPONENTS,
		MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS,
		MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS,
		MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
		MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS,
		MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
		MAX_TESS_EVALUATION_ATOMIC_COUNTERS,
		MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB,
		MAX_TESS_EVALUATION_IMAGE_UNIFORMS,
		MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
		MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
		PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
		IS_PER_PATCH = 0x92E7,
		REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
		REFERENCED_BY_TESS_EVALUATION_SHADER,
		TESS_EVALUATION_SHADER = 0x8E87,
		TESS_CONTROL_SHADER,
		TESS_CONTROL_SHADER_BIT = 0x00000008,
		TESS_EVALUATION_SHADER_BIT = 0x00000010,
		TEXTURE_BORDER_COLOR = 0x1004,
		CLAMP_TO_BORDER = 0x812D,
		TEXTURE_BUFFER = 0x8C2A,
		TEXTURE_BUFFER_BINDING = 0x8C2A,
		MAX_TEXTURE_BUFFER_SIZE,
		TEXTURE_BINDING_BUFFER,
		TEXTURE_BUFFER_DATA_STORE_BINDING,
		TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F,
		SAMPLER_BUFFER = 0x8DC2,
		INT_SAMPLER_BUFFER = 0x8DD0,
		UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8,
		IMAGE_BUFFER = 0x9051,
		INT_IMAGE_BUFFER = 0x905C,
		UNSIGNED_INT_IMAGE_BUFFER = 0x9067,
		TEXTURE_BUFFER_OFFSET = 0x919D,
		TEXTURE_BUFFER_SIZE,

		COMPRESSED_RGBA_ASTC_4x4 = 0x93B0,
		COMPRESSED_RGBA_ASTC_5x4,
		COMPRESSED_RGBA_ASTC_5x5,
		COMPRESSED_RGBA_ASTC_6x5,
		COMPRESSED_RGBA_ASTC_6x6,
		COMPRESSED_RGBA_ASTC_8x5,
		COMPRESSED_RGBA_ASTC_8x6,
		COMPRESSED_RGBA_ASTC_8x8,
		COMPRESSED_RGBA_ASTC_10x5,
		COMPRESSED_RGBA_ASTC_10x6,
		COMPRESSED_RGBA_ASTC_10x8,
		COMPRESSED_RGBA_ASTC_10x10,
		COMPRESSED_RGBA_ASTC_12x10,
		COMPRESSED_RGBA_ASTC_12x12,
		COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0,
		COMPRESSED_SRGB8_ALPHA8_ASTC_5x4,
		COMPRESSED_SRGB8_ALPHA8_ASTC_5x5,
		COMPRESSED_SRGB8_ALPHA8_ASTC_6x5,
		COMPRESSED_SRGB8_ALPHA8_ASTC_6x6,
		COMPRESSED_SRGB8_ALPHA8_ASTC_8x5,
		COMPRESSED_SRGB8_ALPHA8_ASTC_8x6,
		COMPRESSED_SRGB8_ALPHA8_ASTC_8x8,
		COMPRESSED_SRGB8_ALPHA8_ASTC_10x5,
		COMPRESSED_SRGB8_ALPHA8_ASTC_10x6,
		COMPRESSED_SRGB8_ALPHA8_ASTC_10x8,
		COMPRESSED_SRGB8_ALPHA8_ASTC_10x10,
		COMPRESSED_SRGB8_ALPHA8_ASTC_12x10,
		COMPRESSED_SRGB8_ALPHA8_ASTC_12x12,

		TEXTURE_CUBE_MAP_ARRAY = 0x9009,
		TEXTURE_BINDING_CUBE_MAP_ARRAY,
		SAMPLER_CUBE_MAP_ARRAY = 0x900C,
		SAMPLER_CUBE_MAP_ARRAY_SHADOW,
		INT_SAMPLER_CUBE_MAP_ARRAY,
		UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY,
		IMAGE_CUBE_MAP_ARRAY = 0x9054,
		INT_IMAGE_CUBE_MAP_ARRAY = 0x905F,
		UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
		TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102,
		TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105,
		SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B,
		INT_SAMPLER_2D_MULTISAMPLE_ARRAY,
		UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
	};

	using GLDEBUGPROC = GlFunc<void(GLenum source, GLenum type, uint32_t id, GLenum severity, int length, const char* message, const void* userParam)>;
};

struct GlesExtE
{
	enum {
		TEXTURE_MAX_ANISOTROPY = 0x84FE,
		MAX_TEXTURE_MAX_ANISOTROPY,

		TEXTURE_VIEW_MIN_LEVEL = 0x82DB,
		TEXTURE_VIEW_NUM_LEVELS,
		TEXTURE_VIEW_MIN_LAYER,
		TEXTURE_VIEW_NUM_LAYERS,

		BUFFER_ACCESS = 0x88BB,

		FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C,

		COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,
        COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,
        COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,
        COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,

		MAP_PERSISTENT_BIT = 0x0040,
        MAP_COHERENT_BIT = 0x0080,
        DYNAMIC_STORAGE_BIT = 0x0100,
        CLIENT_STORAGE_BIT = 0x0200,
		BUFFER_IMMUTABLE_STORAGE = 0x821F,
        BUFFER_STORAGE_FLAGS = 0x8220,
		CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x4000
	};
};

#define GL11_GLES2_COMMON_FUNCTIONS \
	GL_FUNC(BindTexture, void, (GLenum target, uint32_t texture)) \
	GL_FUNC(BlendFunc, void, (GLenum sfactor, GLenum dfactor)) \
	GL_FUNC(Clear, void, (uint32_t mask)) \
	GL_FUNC(ClearColor, void, (float red, float green, float blue, float alpha)) \
	GL_FUNC(ColorMask, void, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) \
	GL_FUNC(CopyTexImage2D, void, (GLenum target, int32_t level, GLenum internalformat, int32_t x, int32_t y, int32_t width, int32_t height, int32_t border)) \
	GL_FUNC(CopyTexSubImage2D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t x, int32_t y, int32_t width, int32_t height)) \
	GL_FUNC(CullFace, void, (GLenum mode)) \
	GL_FUNC(DeleteTextures, void, (int32_t n, const uint32_t* textures)) \
	GL_FUNC(DepthFunc, void, (GLenum func)) \
	GL_FUNC(DepthMask, void, (GLboolean flag)) \
	GL_FUNC(Disable, void, (GLenum cap)) \
	GL_FUNC(DrawArrays, void, (GLenum mode, int32_t first, int32_t count)) \
	GL_FUNC(DrawElements, void, (GLenum mode, int32_t count, GLenum type, const void* indices)) \
	GL_FUNC(Enable, void, (GLenum cap)) \
	GL_FUNC(Finish, void, ()) \
	GL_FUNC(Flush, void, ()) \
	GL_FUNC(FrontFace, void, (GLenum mode)) \
	GL_FUNC(GetFloatv, void, (GLenum pname, float *data)) \
	GL_FUNC(GetIntegerv, void, (GLenum pname, int32_t* data)) \
	GL_FUNC(GetString, const uint8_t*, (GLenum name)) \
	GL_FUNC(GenTextures, void, (int32_t n, uint32_t* textures)) \
	GL_FUNC(GetBooleanv, void, (GLenum pname, GLboolean* data)) \
	GL_FUNC(GetError, GLenum, ()) \
	GL_FUNC(GetTexParameterfv, void, (GLenum target, GLenum pname, float* params)) \
	GL_FUNC(GetTexParameteriv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(Hint, void, (GLenum target, GLenum mode)) \
	GL_FUNC(IsEnabled, GLboolean, (GLenum cap)) \
	GL_FUNC(IsTexture, GLboolean, (uint32_t texture)) \
	GL_FUNC(LineWidth, void, (float width)) \
	GL_FUNC(PixelStorei, void, (GLenum pname, int32_t param)) \
	GL_FUNC(PolygonOffset, void, (float factor, float units)) \
	GL_FUNC(ReadPixels, void, (int32_t x, int32_t y, int32_t width, int32_t height, GLenum format, GLenum type, void* pixels)) \
	GL_FUNC(Scissor, void, (int32_t x, int32_t y, int32_t width, int32_t height)) \
	GL_FUNC(StencilFunc, void, (GLenum func, int32_t ref, uint32_t mask)) \
	GL_FUNC(StencilMask, void, (uint32_t mask)) \
	GL_FUNC(StencilOp, void, (GLenum fail, GLenum zfail, GLenum zpass)) \
	GL_FUNC(TexImage2D, void, (GLenum target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t border, GLenum format, GLenum type, const void* pixels)) \
	GL_FUNC(TexParameterf, void, (GLenum target, GLenum pname, float param)) \
	GL_FUNC(TexParameterfv, void, (GLenum target, GLenum pname, const float* params)) \
	GL_FUNC(TexParameteri, void, (GLenum target, GLenum pname, int32_t param)) \
	GL_FUNC(TexParameteriv, void, (GLenum target, GLenum pname, const int32_t* params)) \
	GL_FUNC(TexSubImage2D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, GLenum format, GLenum type, const void* pixels)) \
	GL_FUNC(Viewport, void, (int32_t x, int32_t y, int32_t width, int32_t height))

#define GLES2_NEW_FUNCTIONS \
	GL_FUNC(ActiveTexture, void, (GLenum texture)) \
	GL_FUNC(AttachShader, void, (uint32_t program, uint32_t shader)) \
	GL_FUNC(BindAttribLocation, void, (uint32_t program, uint32_t index, const char* name)) \
	GL_FUNC(BindBuffer, void, (GLenum target, uint32_t buffer)) \
	GL_FUNC(BindFramebuffer, void, (GLenum target, uint32_t framebuffer)) \
	GL_FUNC(BindRenderbuffer, void, (GLenum target, uint32_t renderbuffer)) \
	GL_FUNC(BlendColor, void, (float red, float green, float blue, float alpha)) \
	GL_FUNC(BlendEquation, void, (GLenum mode)) \
	GL_FUNC(BlendEquationSeparate, void, (GLenum modeRGB, GLenum modeAlpha)) \
	GL_FUNC(BlendFuncSeparate, void, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) \
	GL_FUNC(BufferData, void, (GLenum target, intptr_t size, const void* data, GLenum usage)) \
	GL_FUNC(BufferSubData, void, (GLenum target, intptr_t offset, intptr_t size, const void* data)) \
	GL_FUNC(ClearDepthf, void, (float d)) \
	GL_FUNC(ClearStencil, void, (int32_t s)) \
	GL_FUNC(CompileShader, void, (uint32_t shader)) \
	GL_FUNC(CompressedTexImage2D, void, (GLenum target, int32_t level, GLenum internalformat, int32_t width, int32_t height, int32_t border, int32_t imageSize, const void* data)) \
	GL_FUNC(CompressedTexSubImage2D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t width, int32_t height, GLenum format, int32_t imageSize, const void* data)) \
	GL_FUNC(CreateProgram, uint32_t, ()) \
	GL_FUNC(CreateShader, uint32_t, (GLenum type)) \
	GL_FUNC(DeleteBuffers, void, (int32_t n, const uint32_t* buffers)) \
	GL_FUNC(DeleteFramebuffers, void, (int32_t n, const uint32_t* framebuffers)) \
	GL_FUNC(DeleteProgram, void, (uint32_t program)) \
	GL_FUNC(DeleteRenderbuffers, void, (int32_t n, const uint32_t* renderbuffers)) \
	GL_FUNC(DeleteShader, void, (uint32_t shader)) \
	GL_FUNC(DepthRangef, void, (float n, float f)) \
	GL_FUNC(DetachShader, void, (uint32_t program, uint32_t shader)) \
	GL_FUNC(DisableVertexAttribArray, void, (uint32_t index)) \
	GL_FUNC(EnableVertexAttribArray, void, (uint32_t index)) \
	GL_FUNC(FramebufferRenderbuffer, void, (GLenum target, GLenum attachment, GLenum renderbuffertarget, uint32_t renderbuffer)) \
	GL_FUNC(FramebufferTexture2D, void, (GLenum target, GLenum attachment, GLenum textarget, uint32_t texture, int32_t level)) \
	GL_FUNC(GenBuffers, void, (int32_t n, uint32_t *buffers)) \
	GL_FUNC(GenerateMipmap, void, (GLenum target)) \
	GL_FUNC(GenFramebuffers, void, (int32_t n, uint32_t* framebuffers)) \
	GL_FUNC(GenRenderbuffers, void, (int32_t n, uint32_t* renderbuffers)) \
	GL_FUNC(GetActiveUniform, void, (uint32_t program, uint32_t index, int32_t bufSize, int32_t* length, int32_t* size, GLenum* type, char* name)) \
	GL_FUNC(GetAttachedShaders, void, (uint32_t program, int32_t maxCount, int32_t* count, uint32_t* shaders)) \
	GL_FUNC(GetAttribLocation, int32_t, (uint32_t program, const char* name)) \
	GL_FUNC(GetBufferParameteriv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(GetFramebufferAttachmentParameteriv, void, (GLenum target, GLenum attachment, GLenum pname, int32_t* params)) \
	GL_FUNC(GetProgramiv, void, (uint32_t program, GLenum pname, int32_t* params)) \
	GL_FUNC(GetProgramInfoLog, void, (uint32_t program, int32_t bufSize, int32_t* length, char* infoLog)) \
	GL_FUNC(GetShaderiv, void, (uint32_t shader, GLenum pname, int32_t* params)) \
	GL_FUNC(GetShaderInfoLog, void, (uint32_t shader, int32_t bufSize, int32_t* length, char* infoLog)) \
	GL_FUNC(GetShaderPrecisionFormat, void, (GLenum shadertype, GLenum precisiontype, int32_t* range, int32_t* precision)) \
	GL_FUNC(GetUniformLocation, int32_t, (uint32_t program, const char* name)) \
	GL_FUNC(LinkProgram, void, (uint32_t program)) \
	GL_FUNC(RenderbufferStorage, void, (GLenum target, GLenum internalformat, int32_t width, int32_t height)) \
	GL_FUNC(SampleCoverage, void, (float value, GLboolean invert)) \
	GL_FUNC(ShaderBinary, void, (int32_t count, const uint32_t *shaders, GLenum binaryFormat, const void* binary, int32_t length)) \
	GL_FUNC(ShaderSource, void, (uint32_t shader, int32_t count, const char* const* string, const int32_t* length)) \
	GL_FUNC(StencilFuncSeparate, void, (GLenum face, GLenum func, int32_t ref, uint32_t mask)) \
	GL_FUNC(StencilMaskSeparate, void, (GLenum face, uint32_t mask)) \
	GL_FUNC(StencilOpSeparate, void, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)) \
	GL_FUNC(Uniform1i, void, (int32_t location, int32_t v0)) \
	GL_FUNC(Uniform4fv, void, (int32_t location, int32_t count, const float* value)) \
	GL_FUNC(UseProgram, void, (uint32_t program)) \
	GL_FUNC(VertexAttribPointer, void, (uint32_t index, int32_t size, GLenum type, GLboolean normalized, int32_t stride, const void* pointer)) \
	GL_FUNC(ValidateProgram, void, (uint32_t program)) \
	GL_FUNC(CheckFramebufferStatus, GLenum, (GLenum target)) \
	GL_FUNC(IsBuffer, GLboolean, (uint32_t buffer)) \
	GL_FUNC(IsFramebuffer, GLboolean, (uint32_t framebuffer)) \
	GL_FUNC(IsProgram, GLboolean, (uint32_t program)) \
	GL_FUNC(IsRenderbuffer, GLboolean, (uint32_t renderbuffer)) \
	GL_FUNC(IsShader, GLboolean, (uint32_t shader)) \
	GL_FUNC(GetShaderSource, void, (uint32_t shader, int32_t bufSize, int32_t* length, char* source)) \
	GL_FUNC(GetUniformfv, void, (uint32_t program, int32_t location, float* params)) \
	GL_FUNC(GetUniformiv, void, (uint32_t program, int32_t location, int32_t* params)) \
	GL_FUNC(Uniform1iv, void, (int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(Uniform1f, void, (int32_t location, float v0)) \
	GL_FUNC(Uniform1fv, void, (int32_t location, int32_t count, const float* value)) \
	GL_FUNC(Uniform2f, void, (int32_t location, float v0, float v1)) \
	GL_FUNC(Uniform2fv, void, (int32_t location, int32_t count, const float* value)) \
	GL_FUNC(Uniform2i, void, (int32_t location, int32_t v0, int32_t v1)) \
	GL_FUNC(Uniform2iv, void, (int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(Uniform3f, void, (int32_t location, float v0, float v1, float v2)) \
	GL_FUNC(Uniform3fv, void, (int32_t location, int32_t count, const float* value)) \
	GL_FUNC(Uniform3i, void, (int32_t location, int32_t v0, int32_t v1, int32_t v2)) \
	GL_FUNC(Uniform3iv, void, (int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(Uniform4f, void, (int32_t location, float v0, float v1, float v2, float v3)) \
	GL_FUNC(Uniform4i, void, (int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3)) \
	GL_FUNC(Uniform4iv, void, (int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(UniformMatrix2fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix3fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix4fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(GetVertexAttribfv, void, (uint32_t index, GLenum pname, float* params)) \
	GL_FUNC(GetVertexAttribiv, void, (uint32_t index, GLenum pname, int32_t* params)) \
	GL_FUNC(GetVertexAttribPointerv, void, (uint32_t index, GLenum pname, void** pointer)) \
	GL_FUNC(GetRenderbufferParameteriv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(GetActiveAttrib, void, (uint32_t program, uint32_t index, int32_t bufSize, int32_t* length, int32_t* size, GLenum* type, char* name)) \
	GL_FUNC(ReleaseShaderCompiler, void, ()) \
	GL_FUNC(VertexAttrib1f, void, (uint32_t index, float x)) \
	GL_FUNC(VertexAttrib1fv, void, (uint32_t index, const float* v)) \
	GL_FUNC(VertexAttrib2f, void, (uint32_t index, float x, float y)) \
	GL_FUNC(VertexAttrib2fv, void, (uint32_t index, const float* v)) \
	GL_FUNC(VertexAttrib3f, void, (uint32_t index, float x, float y, float z)) \
	GL_FUNC(VertexAttrib3fv, void, (uint32_t index, const float* v)) \
	GL_FUNC(VertexAttrib4f, void, (uint32_t index, float x, float y, float z, float w)) \
	GL_FUNC(VertexAttrib4fv, void, (uint32_t index, const float* v))

#define GLES3_NEW_FUNCTIONS \
	GL_FUNC(ReadBuffer, void, (GLenum src)) \
	GL_FUNC(DrawRangeElements, void, (GLenum mode, uint32_t start, uint32_t end, int32_t count, GLenum type, const void* indices)) \
	GL_FUNC(TexImage3D, void, (GLenum target, int32_t level, int32_t internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, GLenum format, GLenum type, const void* pixels)) \
	GL_FUNC(TexSubImage3D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, GLenum format, GLenum type, const void* pixels)) \
	GL_FUNC(CopyTexSubImage3D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t x, int32_t y, int32_t width, int32_t height)) \
	GL_FUNC(CompressedTexImage3D, void, (GLenum target, int32_t level, GLenum internalformat, int32_t width, int32_t height, int32_t depth, int32_t border, int32_t imageSize, const void* data)) \
	GL_FUNC(CompressedTexSubImage3D, void, (GLenum target, int32_t level, int32_t xoffset, int32_t yoffset, int32_t zoffset, int32_t width, int32_t height, int32_t depth, GLenum format, int32_t imageSize, const void* data)) \
	GL_FUNC(GenQueries, void, (int32_t n, uint32_t* ids)) \
	GL_FUNC(DeleteQueries, void, (int32_t n, const uint32_t* ids)) \
	GL_FUNC(IsQuery, GLboolean, (uint32_t id)) \
	GL_FUNC(BeginQuery, void, (GLenum target, uint32_t id)) \
	GL_FUNC(EndQuery, void, (GLenum target)) \
	GL_FUNC(GetQueryiv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(GetQueryObjectuiv, void, (uint32_t id, GLenum pname, uint32_t* params)) \
	GL_FUNC(UnmapBuffer, GLboolean, (GLenum target)) \
	GL_FUNC(GetBufferPointerv, void, (GLenum target, GLenum pname, void** params)) \
	GL_FUNC(DrawBuffers, void, (int32_t n, const GLenum *bufs)) \
	GL_FUNC(UniformMatrix2x3fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix3x2fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix2x4fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix4x2fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix3x4fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(UniformMatrix4x3fv, void, (int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(BlitFramebuffer, void, (int32_t srcX0, int32_t srcY0, int32_t srcX1, int32_t srcY1, int32_t dstX0, int32_t dstY0, int32_t dstX1, int32_t dstY1, uint32_t mask, GLenum filter)) \
	GL_FUNC(RenderbufferStorageMultisample, void, (GLenum target, int32_t samples, GLenum internalformat, int32_t width, int32_t height)) \
	GL_FUNC(FramebufferTextureLayer, void, (GLenum target, GLenum attachment, uint32_t texture, int32_t level, int32_t layer)) \
	GL_FUNC(MapBufferRange, void*, (GLenum target, intptr_t offset, intptr_t length, uint32_t access)) \
	GL_FUNC(FlushMappedBufferRange, void, (GLenum target, intptr_t offset, intptr_t length)) \
	GL_FUNC(BindVertexArray, void, (uint32_t array)) \
	GL_FUNC(DeleteVertexArrays, void, (int32_t n, const uint32_t* arrays)) \
	GL_FUNC(GenVertexArrays, void, (int32_t n, uint32_t* arrays)) \
	GL_FUNC(IsVertexArray, GLboolean, (uint32_t array)) \
	GL_FUNC(GetIntegeri_v, void, (GLenum target, uint32_t index, int32_t* data)) \
	GL_FUNC(BeginTransformFeedback, void, (GLenum primitiveMode)) \
	GL_FUNC(EndTransformFeedback, void, ()) \
	GL_FUNC(BindBufferRange, void, (GLenum target, uint32_t index, uint32_t buffer, intptr_t offset, intptr_t size)) \
	GL_FUNC(BindBufferBase, void, (GLenum target, uint32_t index, uint32_t buffer)) \
	GL_FUNC(TransformFeedbackVaryings, void, (uint32_t program, int32_t count, const char* const* varyings, GLenum bufferMode)) \
	GL_FUNC(GetTransformFeedbackVarying, void, (uint32_t program, uint32_t index, int32_t bufSize, int32_t* length, int32_t* size, GLenum* type, char* name)) \
	GL_FUNC(VertexAttribIPointer, void, (uint32_t index, int32_t size, GLenum type, int32_t stride, const void* pointer)) \
	GL_FUNC(GetVertexAttribIiv, void, (uint32_t index, GLenum pname, int32_t* params)) \
	GL_FUNC(GetVertexAttribIuiv, void, (uint32_t index, GLenum pname, uint32_t* params)) \
	GL_FUNC(VertexAttribI4i, void, (uint32_t index, int32_t x, int32_t y, int32_t z, int32_t w)) \
	GL_FUNC(VertexAttribI4ui, void, (uint32_t index, uint32_t x, uint32_t y, uint32_t z, uint32_t w)) \
	GL_FUNC(VertexAttribI4iv, void, (uint32_t index, const int32_t* v)) \
	GL_FUNC(VertexAttribI4uiv, void, (uint32_t index, const uint32_t* v)) \
	GL_FUNC(GetUniformuiv, void, (uint32_t program, int32_t location, uint32_t* params)) \
	GL_FUNC(GetFragDataLocation, int32_t, (uint32_t program, const char* name)) \
	GL_FUNC(Uniform1ui, void, (int32_t location, uint32_t v0)) \
	GL_FUNC(Uniform2ui, void, (int32_t location, uint32_t v0, uint32_t v1)) \
	GL_FUNC(Uniform3ui, void, (int32_t location, uint32_t v0, uint32_t v1, uint32_t v2)) \
	GL_FUNC(Uniform4ui, void, (int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)) \
	GL_FUNC(Uniform1uiv, void, (int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(Uniform2uiv, void, (int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(Uniform3uiv, void, (int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(Uniform4uiv, void, (int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(ClearBufferiv, void, (GLenum buffer, int32_t drawbuffer, const int32_t* value)) \
	GL_FUNC(ClearBufferuiv, void, (GLenum buffer, int32_t drawbuffer, const uint32_t* value)) \
	GL_FUNC(ClearBufferfv, void, (GLenum buffer, int32_t drawbuffer, const float* value)) \
	GL_FUNC(ClearBufferfi, void, (GLenum buffer, int32_t drawbuffer, float depth, int32_t stencil)) \
	GL_FUNC(GetStringi, const uint8_t*, (GLenum name, uint32_t index)) \
	GL_FUNC(CopyBufferSubData, void, (GLenum readTarget, GLenum writeTarget, intptr_t readOffset, intptr_t writeOffset, intptr_t size)) \
	GL_FUNC(GetUniformIndices, void, (uint32_t program, int32_t uniformCount, const char* const* uniformNames, uint32_t* uniformIndices)) \
	GL_FUNC(GetActiveUniformsiv, void, (uint32_t program, int32_t uniformCount, const uint32_t *uniformIndices, GLenum pname, int32_t* params)) \
	GL_FUNC(GetUniformBlockIndex, uint32_t, (uint32_t program, const char* uniformBlockName)) \
	GL_FUNC(GetActiveUniformBlockiv, void, (uint32_t program, uint32_t uniformBlockIndex, GLenum pname, int32_t* params)) \
	GL_FUNC(GetActiveUniformBlockName, void, (uint32_t program, uint32_t uniformBlockIndex, int32_t bufSize, int32_t* length, char* uniformBlockName)) \
	GL_FUNC(UniformBlockBinding, void, (uint32_t program, uint32_t uniformBlockIndex, uint32_t uniformBlockBinding)) \
	GL_FUNC(DrawArraysInstanced, void, (GLenum mode, int32_t first, int32_t count, int32_t instancecount)) \
	GL_FUNC(DrawElementsInstanced, void, (GLenum mode, int32_t count, GLenum type, const void* indices, int32_t instancecount)) \
	GL_FUNC(FenceSync, GLsync, (GLenum condition, uint32_t flags)) \
	GL_FUNC(IsSync, GLboolean, (GLsync sync)) \
	GL_FUNC(DeleteSync, void, (GLsync sync)) \
	GL_FUNC(ClientWaitSync, GLenum, (GLsync sync, uint32_t flags, uint64_t timeout)) \
	GL_FUNC(WaitSync, void, (GLsync sync, uint32_t flags, uint64_t timeout)) \
	GL_FUNC(GetInteger64v, void, (GLenum pname, int64_t* data)) \
	GL_FUNC(GetSynciv, void, (GLsync sync, GLenum pname, int32_t count, int32_t* length, int32_t* values)) \
	GL_FUNC(GetInteger64i_v, void, (GLenum target, uint32_t index, int64_t* data)) \
	GL_FUNC(GetBufferParameteri64v, void, (GLenum target, GLenum pname, int64_t* params)) \
	GL_FUNC(GenSamplers, void, (int32_t count, uint32_t* samplers)) \
	GL_FUNC(DeleteSamplers, void, (int32_t count, const uint32_t* samplers)) \
	GL_FUNC(IsSampler, GLboolean, (uint32_t sampler)) \
	GL_FUNC(BindSampler, void, (uint32_t unit, uint32_t sampler)) \
	GL_FUNC(SamplerParameteri, void, (uint32_t sampler, GLenum pname, int32_t param)) \
	GL_FUNC(SamplerParameteriv, void, (uint32_t sampler, GLenum pname, const int32_t* param)) \
	GL_FUNC(SamplerParameterf, void, (uint32_t sampler, GLenum pname, float param)) \
	GL_FUNC(SamplerParameterfv, void, (uint32_t sampler, GLenum pname, const float* param)) \
	GL_FUNC(GetSamplerParameteriv, void, (uint32_t sampler, GLenum pname, int32_t* params)) \
	GL_FUNC(GetSamplerParameterfv, void, (uint32_t sampler, GLenum pname, float* params)) \
	GL_FUNC(VertexAttribDivisor, void, (uint32_t index, uint32_t divisor)) \
	GL_FUNC(BindTransformFeedback, void, (GLenum target, uint32_t id)) \
	GL_FUNC(DeleteTransformFeedbacks, void, (int32_t n, const uint32_t* ids)) \
	GL_FUNC(GenTransformFeedbacks, void, (int32_t n, uint32_t* ids)) \
	GL_FUNC(IsTransformFeedback, GLboolean, (uint32_t id)) \
	GL_FUNC(PauseTransformFeedback, void, ()) \
	GL_FUNC(ResumeTransformFeedback, void, ()) \
	GL_FUNC(GetProgramBinary, void, (uint32_t program, int32_t bufSize, int32_t* length, GLenum* binaryFormat, void* binary)) \
	GL_FUNC(ProgramBinary, void, (uint32_t program, GLenum binaryFormat, const void* binary, int32_t length)) \
	GL_FUNC(ProgramParameteri, void, (uint32_t program, GLenum pname, int32_t value)) \
	GL_FUNC(InvalidateFramebuffer, void, (GLenum target, int32_t numAttachments, const GLenum* attachments)) \
	GL_FUNC(InvalidateSubFramebuffer, void, (GLenum target, int32_t numAttachments, const GLenum* attachments, int32_t x, int32_t y, int32_t width, int32_t height)) \
	GL_FUNC(TexStorage2D, void, (GLenum target, int32_t levels, GLenum internalformat, int32_t width, int32_t height)) \
	GL_FUNC(TexStorage3D, void, (GLenum target, int32_t levels, GLenum internalformat, int32_t width, int32_t height, int32_t depth)) \
	GL_FUNC(GetInternalformativ, void, (GLenum target, GLenum internalformat, GLenum pname, int32_t count, int32_t* params))

#define GLES31_NEW_FUNCTIONS \
	GL_FUNC(DispatchCompute, void, (uint32_t num_groups_x, uint32_t num_groups_y, uint32_t num_groups_z)) \
	GL_FUNC(DispatchComputeIndirect, void, (intptr_t indirect)) \
	GL_FUNC(DrawArraysIndirect, void, (GLenum mode, const void* indirect)) \
	GL_FUNC(DrawElementsIndirect, void, (GLenum mode, GLenum type, const void* indirect)) \
	GL_FUNC(FramebufferParameteri, void, (GLenum target, GLenum pname, int32_t param)) \
	GL_FUNC(GetFramebufferParameteriv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(GetProgramInterfaceiv, void, (uint32_t program, GLenum programInterface, GLenum pname, int32_t* params)) \
	GL_FUNC(GetProgramResourceIndex, uint32_t, (uint32_t program, GLenum programInterface, const char* name)) \
	GL_FUNC(GetProgramResourceName, void, (uint32_t program, GLenum programInterface, uint32_t index, int32_t bufSize, int32_t* length, char* name)) \
	GL_FUNC(GetProgramResourceiv, void, (uint32_t program, GLenum programInterface, uint32_t index, int32_t propCount, const GLenum* props, int32_t bufSize, int32_t* length, int32_t* params)) \
	GL_FUNC(GetProgramResourceLocation, int32_t, (uint32_t program, GLenum programInterface, const char* name)) \
	GL_FUNC(UseProgramStages, void, (uint32_t pipeline, uint32_t stages, uint32_t program)) \
	GL_FUNC(ActiveShaderProgram, void, (uint32_t pipeline, uint32_t program)) \
	GL_FUNC(CreateShaderProgramv, uint32_t, (GLenum type, int32_t count, const char* const* strings)) \
	GL_FUNC(BindProgramPipeline, void, (uint32_t pipeline)) \
	GL_FUNC(DeleteProgramPipelines, void, (int32_t n, const uint32_t* pipelines)) \
	GL_FUNC(GenProgramPipelines, void, (int32_t n, uint32_t* pipelines)) \
	GL_FUNC(IsProgramPipeline, GLboolean, (uint32_t pipeline)) \
	GL_FUNC(GetProgramPipelineiv, void, (uint32_t pipeline, GLenum pname, int32_t* params)) \
	GL_FUNC(ProgramUniform1i, void, (uint32_t program, int32_t location, int32_t v0)) \
	GL_FUNC(ProgramUniform2i, void, (uint32_t program, int32_t location, int32_t v0, int32_t v1)) \
	GL_FUNC(ProgramUniform3i, void, (uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2)) \
	GL_FUNC(ProgramUniform4i, void, (uint32_t program, int32_t location, int32_t v0, int32_t v1, int32_t v2, int32_t v3)) \
	GL_FUNC(ProgramUniform1ui, void, (uint32_t program, int32_t location, uint32_t v0)) \
	GL_FUNC(ProgramUniform2ui, void, (uint32_t program, int32_t location, uint32_t v0, uint32_t v1)) \
	GL_FUNC(ProgramUniform3ui, void, (uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2)) \
	GL_FUNC(ProgramUniform4ui, void, (uint32_t program, int32_t location, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)) \
	GL_FUNC(ProgramUniform1f, void, (uint32_t program, int32_t location, float v0)) \
	GL_FUNC(ProgramUniform2f, void, (uint32_t program, int32_t location, float v0, float v1)) \
	GL_FUNC(ProgramUniform3f, void, (uint32_t program, int32_t location, float v0, float v1, float v2)) \
	GL_FUNC(ProgramUniform4f, void, (uint32_t program, int32_t location, float v0, float v1, float v2, float v3)) \
	GL_FUNC(ProgramUniform1iv, void, (uint32_t program, int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(ProgramUniform2iv, void, (uint32_t program, int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(ProgramUniform3iv, void, (uint32_t program, int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(ProgramUniform4iv, void, (uint32_t program, int32_t location, int32_t count, const int32_t* value)) \
	GL_FUNC(ProgramUniform1uiv, void, (uint32_t program, int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(ProgramUniform2uiv, void, (uint32_t program, int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(ProgramUniform3uiv, void, (uint32_t program, int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(ProgramUniform4uiv, void, (uint32_t program, int32_t location, int32_t count, const uint32_t* value)) \
	GL_FUNC(ProgramUniform1fv, void, (uint32_t program, int32_t location, int32_t count, const float* value)) \
	GL_FUNC(ProgramUniform2fv, void, (uint32_t program, int32_t location, int32_t count, const float* value)) \
	GL_FUNC(ProgramUniform3fv, void, (uint32_t program, int32_t location, int32_t count, const float* value)) \
	GL_FUNC(ProgramUniform4fv, void, (uint32_t program, int32_t location, int32_t count, const float* value)) \
	GL_FUNC(ProgramUniformMatrix2fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix3fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix4fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix2x3fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix3x2fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix2x4fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix4x2fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix3x4fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ProgramUniformMatrix4x3fv, void, (uint32_t program, int32_t location, int32_t count, GLboolean transpose, const float* value)) \
	GL_FUNC(ValidateProgramPipeline, void, (uint32_t pipeline)) \
	GL_FUNC(GetProgramPipelineInfoLog, void, (uint32_t pipeline, int32_t bufSize, int32_t* length, char* infoLog)) \
	GL_FUNC(BindImageTexture, void, (uint32_t unit, uint32_t texture, int32_t level, GLboolean layered, int32_t layer, GLenum access, GLenum format)) \
	GL_FUNC(GetBooleani_v, void, (GLenum target, uint32_t index, GLboolean* data)) \
	GL_FUNC(MemoryBarrier, void, (uint32_t barriers)) \
	GL_FUNC(MemoryBarrierByRegion, void, (uint32_t barriers)) \
	GL_FUNC(TexStorage2DMultisample, void, (GLenum target, int32_t samples, GLenum internalformat, int32_t width, int32_t height, GLboolean fixedsamplelocations)) \
	GL_FUNC(GetMultisamplefv, void, (GLenum pname, uint32_t index, float* val)) \
	GL_FUNC(SampleMaski, void, (uint32_t maskNumber, uint32_t mask)) \
	GL_FUNC(GetTexLevelParameteriv, void, (GLenum target, int32_t level, GLenum pname, int32_t* params)) \
	GL_FUNC(GetTexLevelParameterfv, void, (GLenum target, int32_t level, GLenum pname, float* params)) \
	GL_FUNC(BindVertexBuffer, void, (uint32_t bindingindex, uint32_t buffer, intptr_t offset, int32_t stride)) \
	GL_FUNC(VertexAttribFormat, void, (uint32_t attribindex, int32_t size, GLenum type, GLboolean normalized, uint32_t relativeoffset)) \
	GL_FUNC(VertexAttribIFormat, void, (uint32_t attribindex, int32_t size, GLenum type, uint32_t relativeoffset)) \
	GL_FUNC(VertexAttribBinding, void, (uint32_t attribindex, uint32_t bindingindex)) \
	GL_FUNC(VertexBindingDivisor, void, (uint32_t bindingindex, uint32_t divisor))

#define GLES32_NEW_FUNCTIONS \
	GL_FUNC(BlendBarrier, void, ()) \
	GL_FUNC(CopyImageSubData, void, (uint32_t srcName, GLenum srcTarget, int32_t srcLevel, int32_t srcX, int32_t srcY, int32_t srcZ, uint32_t dstName, GLenum dstTarget, int32_t dstLevel, int32_t dstX, int32_t dstY, int32_t dstZ, int32_t srcWidth, int32_t srcHeight, int32_t srcDepth)) \
	GL_FUNC(DebugMessageControl, void, (GLenum source, GLenum type, GLenum severity, int32_t count, const uint32_t* ids, GLboolean enabled)) \
	GL_FUNC(DebugMessageInsert, void, (GLenum source, GLenum type, uint32_t id, GLenum severity, int32_t length, const char* buf)) \
	GL_FUNC(DebugMessageCallback, void, (Gles32E::GLDEBUGPROC callback, const void* userParam)) \
	GL_FUNC(GetDebugMessageLog, uint32_t, (uint32_t count, int32_t bufSize, GLenum* sources, GLenum* types, uint32_t* ids, GLenum* severities, int32_t* lengths, char* messageLog)) \
	GL_FUNC(PushDebugGroup, void, (GLenum source, uint32_t id, int32_t length, const char* message)) \
	GL_FUNC(PopDebugGroup, void, ()) \
	GL_FUNC(ObjectLabel, void, (GLenum identifier, uint32_t name, int32_t length, const char* label)) \
	GL_FUNC(GetObjectLabel, void, (GLenum identifier, uint32_t name, int32_t bufSize, int32_t* length, char* label)) \
	GL_FUNC(ObjectPtrLabel, void, (const void* ptr, int32_t length, const char* label)) \
	GL_FUNC(GetObjectPtrLabel, void, (const void* ptr, int32_t bufSize, int32_t* length, char* label)) \
	GL_FUNC(GetPointerv, void, (GLenum pname, void** params)) \
	GL_FUNC(Enablei, void, (GLenum target, uint32_t index)) \
	GL_FUNC(Disablei, void, (GLenum target, uint32_t index)) \
	GL_FUNC(BlendEquationi, void, (uint32_t buf, GLenum mode)) \
	GL_FUNC(BlendEquationSeparatei, void, (uint32_t buf, GLenum modeRGB, GLenum modeAlpha)) \
	GL_FUNC(BlendFunci, void, (uint32_t buf, GLenum src, GLenum dst)) \
	GL_FUNC(BlendFuncSeparatei, void, (uint32_t buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)) \
	GL_FUNC(ColorMaski, void, (uint32_t index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)) \
	GL_FUNC(IsEnabledi, GLboolean, (GLenum target, uint32_t index)) \
	GL_FUNC(DrawElementsBaseVertex, void, (GLenum mode, int32_t count, GLenum type, const void* indices, int32_t basevertex)) \
	GL_FUNC(DrawRangeElementsBaseVertex, void, (GLenum mode, uint32_t start, uint32_t end, int32_t count, GLenum type, const void* indices, int32_t basevertex)) \
	GL_FUNC(DrawElementsInstancedBaseVertex, void, (GLenum mode, int32_t count, GLenum type, const void* indices, int32_t instancecount, int32_t basevertex)) \
	GL_FUNC(FramebufferTexture, void, (GLenum target, GLenum attachment, uint32_t texture, int32_t level)) \
	GL_FUNC(PrimitiveBoundingBox, void, (float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)) \
	GL_FUNC(GetGraphicsResetStatus, GLenum, ()) \
	GL_FUNC(ReadnPixels, void, (int32_t x, int32_t y, int32_t width, int32_t height, GLenum format, GLenum type, int32_t bufSize, void* data)) \
	GL_FUNC(GetnUniformfv, void, (uint32_t program, int32_t location, int32_t bufSize, float* params)) \
	GL_FUNC(GetnUniformiv, void, (uint32_t program, int32_t location, int32_t bufSize, int32_t* params)) \
	GL_FUNC(GetnUniformuiv, void, (uint32_t program, int32_t location, int32_t bufSize, uint32_t* params)) \
	GL_FUNC(MinSampleShading, void, (float value)) \
	GL_FUNC(PatchParameteri, void, (GLenum pname, int32_t value)) \
	GL_FUNC(TexParameterIiv, void, (GLenum target, GLenum pname, const int32_t* params)) \
	GL_FUNC(TexParameterIuiv, void, (GLenum target, GLenum pname, const uint32_t* params)) \
	GL_FUNC(GetTexParameterIiv, void, (GLenum target, GLenum pname, int32_t* params)) \
	GL_FUNC(GetTexParameterIuiv, void, (GLenum target, GLenum pname, uint32_t* params)) \
	GL_FUNC(SamplerParameterIiv, void, (uint32_t sampler, GLenum pname, const int32_t* param)) \
	GL_FUNC(SamplerParameterIuiv, void, (uint32_t sampler, GLenum pname, const uint32_t* param)) \
	GL_FUNC(GetSamplerParameterIiv, void, (uint32_t sampler, GLenum pname, int32_t* params)) \
	GL_FUNC(GetSamplerParameterIuiv, void, (uint32_t sampler, GLenum pname, uint32_t* params)) \
	GL_FUNC(TexBuffer, void, (GLenum target, GLenum internalformat, uint32_t buffer)) \
	GL_FUNC(TexBufferRange, void, (GLenum target, GLenum internalformat, uint32_t buffer, intptr_t offset, intptr_t size)) \
	GL_FUNC(TexStorage3DMultisample, void, (GLenum target, int32_t samples, GLenum internalformat, int32_t width, int32_t height, int32_t depth, GLboolean fixedsamplelocations))

// common OpenGL ES extensions and some useful OpenGL core features
#define GLES_EXT_FUNCTIONS \
	GL_FUNC(ClearDepth, void, (double d)) \
	GL_FUNC(TextureView, void, (uint32_t texture, GLenum target, uint32_t origtexture, GLenum internalformat, uint32_t minlevel, uint32_t numlevels, uint32_t minlayer, uint32_t numlayers)) \
	GL_FUNC(GetTexImage, void, (GLenum target, int level, GLenum format, GLenum type, void* pixels)) \
	GL_FUNC(GetTextureSubImage, void, (uint32_t texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, int bufSize, void* pixels)) \
	GL_FUNC(GetCompressedTextureSubImage, void, (uint32_t texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void* pixels)) \
	GL_FUNC(ClearTexImage, void, (uint32_t texture, int level, GLenum format, GLenum type, const void* data)) \
	GL_FUNC(ClearTexSubImage, void, (uint32_t texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, const void* data)) \
	GL_FUNC(MapBuffer, void*, (GLenum target, GLenum access)) \
	GL_FUNC(MultiDrawArraysIndirect, void, (GLenum mode, const void* indirect, int primcount, int stride)) \
	GL_FUNC(MultiDrawElementsIndirect, void, (GLenum mode, GLenum type, const void* indirect, int primcount, int strides)) \
	GL_FUNC(FramebufferTexture2DMultisampleEXT, void, (GLenum target, GLenum attachment, GLenum textarget, uint32_t texture, int level, int samples)) \
	GL_FUNC(BufferStorage, void, (GLenum target, size_t size, const void* data, uint32_t flags));

#undef GL_FUNC

extern "C" {
#define GL_FUNC GL_FUNC_PROTOTYPE
	GL11_GLES2_COMMON_FUNCTIONS
	GLES2_NEW_FUNCTIONS
	GLES3_NEW_FUNCTIONS
	GLES31_NEW_FUNCTIONS
	GLES32_NEW_FUNCTIONS
#undef GL_FUNC
}

struct Gl11F
{
#define GL_FUNC GL_FUNC_FIELD
	GL11_GLES2_COMMON_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GL11_GLES2_COMMON_FUNCTIONS;
#undef GL_FUNC
};

#if TINY_LOAD_GL_STATIC_GLES >= 11
constexpr Gl11F Gl11FStatic = {
#define GL_FUNC GL_FUNC_STATIC_LINK
	GL11_GLES2_COMMON_FUNCTIONS
#undef GL_FUNC
};

struct Gles2F
{
#define GL_FUNC GL_FUNC_FIELD
	GLES2_NEW_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GLES2_NEW_FUNCTIONS;
#undef GL_FUNC
};

#if TINY_LOAD_GL_STATIC_GLES >= 20
constexpr Gles2F Gles2FStatic = {
#define GL_FUNC GL_FUNC_STATIC_LINK
	GLES2_NEW_FUNCTIONS
#undef GL_FUNC
};
#endif

struct Gles3F
{
#define GL_FUNC GL_FUNC_FIELD
	GLES3_NEW_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GLES3_NEW_FUNCTIONS;
#undef GL_FUNC
};

#if TINY_LOAD_GL_STATIC_GLES >= 30
constexpr Gles3F Gles3NewFunctionsStatic = {
#define GL_FUNC GL_FUNC_STATIC_LINK
	GLES3_NEW_FUNCTIONS
#undef GL_FUNC
};
#endif

struct Gles31F
{
#define GL_FUNC GL_FUNC_FIELD
	GLES31_NEW_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GLES31_NEW_FUNCTIONS;
#undef GL_FUNC
};

#if TINY_LOAD_GL_STATIC_GLES >= 31
constexpr Gles31F Gles31NewFunctionsStatic = {
#define GL_FUNC GL_FUNC_STATIC_LINK
	GLES31_NEW_FUNCTIONS
#undef GL_FUNC
};
#endif

struct Gles32F
{
#define GL_FUNC GL_FUNC_FIELD
	GLES32_NEW_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GLES32_NEW_FUNCTIONS;
#undef GL_FUNC
};
#if TINY_LOAD_GL_STATIC_GLES >= 32
constexpr Gles32F Gles32NewFunctionsStatic = {
#define GL_FUNC GL_FUNC_STATIC_LINK
	GLES32_NEW_FUNCTIONS
#undef GL_FUNC
};
#endif

struct GlesExtF
{
#define GL_FUNC GL_FUNC_FIELD
	GLES_EXT_FUNCTIONS
#undef GL_FUNC
	static constexpr const char* AllFunctionNames =
#define GL_FUNC GL_FUNC_ZTERM_NAME
		GLES_EXT_FUNCTIONS;
#undef GL_FUNC
};

inline void loadDynamic(GlFunc<void()>* functions[], size_t numFunctions, const char* nullSeparatedNames,
	const char* nullSeparatedSufficesTerminatedWithDot, GlFunc<void()>*(*getProcAddress)(const char* name))
{
	char glName[100]{};
	glName[0] = 'g';
	glName[1] = 'l';
	for(size_t i = 0; i < numFunctions; i++)
	{
		for(auto suffix = nullSeparatedSufficesTerminatedWithDot; *suffix != '.'; suffix += strlen(suffix) + 1)
		{
			strcpy(glName + 2, nullSeparatedNames);
			functions[i] = getProcAddress(glName);
			nullSeparatedNames += strlen(nullSeparatedNames) + 1;
		}
	}
}

template<typename T, typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
T loadDynamic(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
{
	static_assert(alignof(T) == alignof(GlFunc<void()>*) && sizeof(T) % sizeof(GlFunc<void()>*) == 0);
	constexpr size_t numFunctions = sizeof(T)/sizeof(GlFunc<void()>*);
	GlFunc<void()>* functions[numFunctions];
	loadDynamic(functions, numFunctions, T::AllFunctionNames, "\0.", getProcAddress);
	T result;
	memcpy(&result, functions, sizeof(result));
	return result;
}
}

struct Gles2: z_D::Gl11E, z_D::Gles2E, z_D::Gl11F, z_D::Gles2F
{
	Gles2() = default;
	constexpr Gles2(const z_D::Gl11F& gl1, const z_D::Gles2F& gles2):
		z_D::Gl11F(gl1), z_D::Gles2F(gles2) {}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static Gles2 LoadDynamic(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return Gles2(
		#if defined(_WIN32) && TINY_LOAD_GL_STATIC_GLES >= 11
			z_D::Gl11FStatic,
		#else
			z_D::loadDynamic<z_D::Gl11F>(getProcAddress),
		#endif
			z_D::loadDynamic<z_D::Gles2F>(getProcAddress)
		);
	}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
#if TINY_LOAD_GL_STATIC_GLES >= 20
	static constexpr Gles2 Load(Loader getProcAddress);
#else
	static Gles2 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return LoadDynamic(getProcAddress);
	}
#endif
};
#if TINY_LOAD_GL_STATIC_GLES >= 20
constexpr Gles2 Gles2Static(z_D::Gl11FStatic, z_D::Gles2FStatic);

#ifdef TINY_LOAD_GL_STATIC_GLES2
template<typename Loader>
constexpr Gles2 Gles2::Load(Loader getProcAddress) {return Gles2Static;}
#endif

struct Gles3: z_D::Gles3E, Gles2, z_D::Gles3F
{
	Gles3() = default;
	constexpr Gles3(const Gles2& gles2, const z_D::Gles3F& gles3):
		Gles2(gles2), Gles3F(gles3) {}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static Gles3 LoadDynamic(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return Gles3(
			Gles2::LoadDynamic(getProcAddress),
			z_D::loadDynamic<z_D::Gles3F>(getProcAddress)
		);
	}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
#if TINY_LOAD_GL_STATIC_GLES >= 30
	static constexpr Gles3 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress);
#else
	static Gles3 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return LoadDynamic(getProcAddress);
	}
#endif
};

#if TINY_LOAD_GL_STATIC_GLES >= 30
constexpr Gles3 Gles3Static(Gles2Static, z_D::Gles3NewFunctionsStatic);
template<typename Loader> constexpr Gles3 Gles3::Load(Loader getProcAddress) {return Gles3Static;}
#endif

struct Gles31: z_D::Gles31E, Gles3, z_D::Gles31F
{
	Gles31() = default;
	constexpr Gles31(const Gles3& gles3, const z_D::Gles31F& gles31):
		Gles3(gles3), z_D::Gles31F(gles31) {}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static Gles31 LoadDynamic(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return Gles31(
			Gles3::LoadDynamic(getProcAddress),
			z_D::loadDynamic<z_D::Gles31F>(getProcAddress)
		);
	}

#if TINY_LOAD_GL_STATIC_GLES >= 31
	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static constexpr Gles31 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress);
#else
	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static Gles31 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return LoadDynamic(getProcAddress);
	}
#endif
};

#if TINY_LOAD_GL_STATIC_GLES >= 31
constexpr Gles31 Gles31Static(Gles3Static, z_D::Gles31NewFunctionsStatic);
template<typename Loader> constexpr Gles31 Gles31::Load(Loader getProcAddress) {return Gles31Static;}
#endif

struct Gles32: z_D::Gles32E, Gles31, z_D::Gles32F
{
	Gles32() = default;
	constexpr Gles32(const Gles31& gles31, const Gles32F& gles32):
		Gles31(gles31), Gles32F(gles32) {}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static Gles32 LoadDynamic(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return Gles32(
			Gles31::LoadDynamic(getProcAddress),
			z_D::loadDynamic<z_D::Gles32F>(getProcAddress)
		);
	}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
#if TINY_LOAD_GL_STATIC_GLES >= 32
	constexpr
#else
	static Gles32 Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return LoadDynamic(getProcAddress);
	}
#endif
};

#if TINY_LOAD_GL_STATIC_GLES >= 32
constexpr Gles32 Gles32Static(Gles31Static, z_D::Gles32NewFunctionsStatic);
template<typename Loader> constexpr Gles32 Gles32::Load(Loader getProcAddress) {return Gles32Static;}
#endif

struct GlesExt: z_D::GlesExtE, Gles32, z_D::GlesExtF
{
	constexpr GlesExt(const Gles32& gles32, const z_D::GlesExtF& glesExt):
		Gles32(gles32), z_D::GlesExtF(glesExt) {}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static GlesExt LoadDynamic(Loader getProcAddress)
	{
		return GlesExt(
			Gles32::LoadDynamic(getProcAddress),
			z_D::loadDynamic<z_D::GlesExtF>(getProcAddress)
		);
	}

	template<typename Loader = decltype(&TinyLoadGL::GetProcAddress)>
	static GlesExt Load(Loader getProcAddress = &TinyLoadGL::GetProcAddress)
	{
		return LoadDynamic(getProcAddress);
	}
};

}
